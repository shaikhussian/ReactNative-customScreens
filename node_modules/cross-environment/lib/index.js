'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getEnv = exports.getBrowser = exports.getEngine = exports.getOS = exports.isMobile = exports.getRuntime = undefined;
exports.default = nodeEnvironment;
exports.setEnvironment = setEnvironment;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _process = process,
    env = _process.env,
    argv = _process.argv;

var customEnvironment = {};
var customDefaults = {};
// eslint-disable-next-line no-undef
var browserWindow = typeof window === 'undefined' ? null : window;

function nodeEnvironment() {
  return {
    runtime: getRuntime(),
    mobile: isMobile(),
    os: getOS(),
    engine: getEngine(),
    env: getEnv(),
    browser: getBrowser()
  };
}

function setEnvironment(_ref) {
  var _ref$environment = _ref.environment,
      environment = _ref$environment === undefined ? {} : _ref$environment,
      _ref$defaults = _ref.defaults,
      defaults = _ref$defaults === undefined ? {} : _ref$defaults;

  _lodash2.default.memoize.Cache = Map;
  _lodash2.default.assign(customEnvironment, environment);
  _lodash2.default.assign(customDefaults, defaults);
}

function _getRuntime() {
  if (customEnvironment.runtime) return customEnvironment.runtime;
  if (isBrowser()) return 'browser';
  if (isNode()) return 'node';
  return 'unknown';
}
var getRuntime = exports.getRuntime = _lodash2.default.memoize(_getRuntime);

function _isMobile() {
  if (customEnvironment.mobile) return customEnvironment.mobile;
  if (getRuntime() === 'node') return false;
  if (!browserWindow) return false;
  return (/mobile/i.test(_lodash2.default.get(browserWindow, 'navigator.userAgent', ''))
  );
}
var isMobile = exports.isMobile = _lodash2.default.memoize(_isMobile);

function _getOS() {
  if (customEnvironment.os) return customEnvironment.os;
  if (getRuntime() === 'node') {
    return process.platform;
  }
  if (!browserWindow) return 'unknown';
  var userAgent = _lodash2.default.get(browserWindow, 'navigator.userAgent', '');
  if (/mac\sos\sx/i.test(userAgent)) {
    return 'darwin';
  } else if (/freebsd/i.test(userAgent)) {
    return 'freebsd';
  } else if (/openbsd/i.test(userAgent)) {
    return 'openbsd';
  } else if (/linux/i.test(userAgent)) {
    return 'linux';
  } else if (/windows/i.test(userAgent)) {
    return 'win32';
  } else if (/kindle/i.test(userAgent)) {
    return 'kindle';
  }
  return 'unknown';
}
var getOS = exports.getOS = _lodash2.default.memoize(_getOS);

function _getEngine() {
  if (customEnvironment.engine) return customEnvironment.engine;
  if (getRuntime() === 'node') return 'v8';
  if (!browserWindow) return 'unknown';
  var engine = 'unknown';
  var userAgent = _lodash2.default.get(browserWindow, 'navigator.userAgent', '');
  if (/gecko/i.test(userAgent)) {
    engine = 'gecko';
  } else if (/webkit/i.test(userAgent)) {
    engine = 'webkit';
  }
  try {
    throw new Error();
  } catch (exc) {
    if (_lodash2.default.isNumber(exc.sourceId)) {
      engine = 'jsc';
    }
  }
  var v8string = 'function%20javaEnabled%28%29%20%7B%20%5Bnative%20code%5D%20%7D';
  if (browserWindow.devicePixelRatio) {
    // eslint-disable-next-line no-undef
    if (engine === 'webkit' && escape(browserWindow.navigator.javaEnabled.toString()) === v8string) {
      return 'v8';
    } else if (engine === 'jsc') {
      return 'jsc';
    }
  }
  return 'unknown';
}
var getEngine = exports.getEngine = _lodash2.default.memoize(_getEngine);

function _getBrowser() {
  if (customEnvironment.browser) return customEnvironment.browser;
  if (getRuntime() !== 'browser') return null;
  var userAgent = _lodash2.default.get(browserWindow, 'navigator.userAgent', '');
  if (/chrome/i.test(userAgent)) {
    return 'chrome';
  } else if (/firefox/i.test(userAgent)) {
    return 'firefox';
  } else if (/safari/i.test(userAgent)) {
    return 'safari';
  } else if (/opera/i.test(userAgent)) {
    return 'opera';
  } else if (/edge/i.test(userAgent)) {
    return 'edge';
  }
  var ieVersion = -1;
  if (browserWindow.navigator.appName.toLowerCase() === 'microsoft internet explorer') {
    var ieRegex = new RegExp('MSIE ([0-9]{1,}[.0-9]{0,})');
    if (ieRegex.exec(userAgent) !== null) ieVersion = parseFloat(RegExp.$1);
  } else if (browserWindow.navigator.appName.toLowerCase() === 'netscape') {
    var _ieRegex = new RegExp('Trident/.*rv:([0-9]{1,}[.0-9]{0,})');
    if (_ieRegex.exec(userAgent) !== null) ieVersion = parseFloat(RegExp.$1);
  }
  if (ieVersion > -1) {
    return `ie${ieVersion}`;
  }
  return 'unknown';
}
var getBrowser = exports.getBrowser = _lodash2.default.memoize(_getBrowser);

function _getEnv() {
  if (customEnvironment.env) return customEnvironment.env;
  var nodeEnv = (env.NODE_ENV || '').toLowerCase();
  var environment = customDefaults.env || 'development';
  if (_lodash2.default.get(env, '__DEV__', '').toLowerCase() === 'false') {
    environment = 'production';
  }
  if (_lodash2.default.includes(argv, '--test') || _lodash2.default.includes(argv, '--testing')) {
    return 'testing';
  } else if (_lodash2.default.includes(argv, '--stage') || _lodash2.default.includes(argv, '--staging')) {
    return 'staging';
  } else if (_lodash2.default.includes(argv, '--prod') || _lodash2.default.includes(argv, '--production')) {
    return 'production';
  } else if (_lodash2.default.includes(argv, '--dev') || _lodash2.default.includes(argv, '--development')) {
    return 'development';
  } else if (nodeEnv === 'test' || nodeEnv === 'testing') {
    return 'testing';
  } else if (nodeEnv === 'stage' || nodeEnv === 'staging') {
    return 'staging';
  } else if (nodeEnv === 'prod' || nodeEnv === 'production') {
    return 'production';
  } else if (nodeEnv === 'dev' || nodeEnv === 'development') {
    return 'development';
  }
  return environment;
}
var getEnv = exports.getEnv = _lodash2.default.memoize(_getEnv);

var isBrowser = new Function('try { return this === window } catch (e) { return false }');

var isNode = new Function('try { return this === global } catch (e) { return false }');