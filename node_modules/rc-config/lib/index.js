'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = rcConfig;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _loadConf = require('load-conf');

var _loadConf2 = _interopRequireDefault(_loadConf);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function rcConfig(_ref) {
  var _ref$config = _ref.config,
      config = _ref$config === undefined ? {} : _ref$config,
      _ref$count = _ref.count,
      count = _ref$count === undefined ? 0 : _ref$count,
      _ref$ignore = _ref.ignore,
      ignore = _ref$ignore === undefined ? [] : _ref$ignore,
      name = _ref.name,
      _ref$order = _ref.order,
      order = _ref$order === undefined ? [] : _ref$order,
      _ref$strategy = _ref.strategy,
      strategy = _ref$strategy === undefined ? 'first' : _ref$strategy,
      type = _ref.type;

  if (!_lodash2.default.isArray(order)) order = [order];
  if (!_lodash2.default.isArray(ignore)) ignore = [ignore];
  order = _lodash2.default.uniq([].concat(_toConsumableArray(order), ['rc', 'js', 'json', 'yml', 'yaml', 'package.json']));
  if (count > order.length) return config;
  if (!type) {
    return rcConfig({
      config,
      count: count + 1,
      ignore,
      name,
      order,
      strategy,
      type: order[count]
    });
  }
  var currentConfig = null;
  switch (type) {
    case 'yaml':
      if (!_lodash2.default.includes(ignore, 'yaml')) {
        currentConfig = (0, _loadConf2.default)(_path2.default.resolve(`.${name}rc.yaml`), null, 'yaml');
      }
      break;
    case 'yml':
      if (!_lodash2.default.includes(ignore, 'yml')) {
        currentConfig = (0, _loadConf2.default)(_path2.default.resolve(`.${name}rc.yml`), null, 'yaml');
      }
      break;
    case 'json':
      if (!_lodash2.default.includes(ignore, 'json')) {
        currentConfig = (0, _loadConf2.default)(_path2.default.resolve(`.${name}rc.json`), null, 'json');
      }
      break;
    case 'js':
      if (!_lodash2.default.includes(ignore, 'js')) {
        currentConfig = (0, _loadConf2.default)(_path2.default.resolve(`.${name}rc.js`), null, 'javascript');
      }
      break;
    case 'rc':
      if (!_lodash2.default.includes(ignore, 'rc')) {
        currentConfig = (0, _loadConf2.default)(_path2.default.resolve(`.${name}rc`), null);
      }
      break;
    case 'package.json':
      if (!_lodash2.default.includes(ignore, 'package.json')) {
        currentConfig = (0, _loadConf2.default)(_path2.default.resolve('package.json'), {}, 'json')[name];
      }
      break;
  }
  if (currentConfig) {
    switch (strategy) {
      case 'first':
        return currentConfig;
      case 'merge':
        return rcConfig({
          config: _lodash2.default.merge(config, currentConfig),
          count: count + 1,
          ignore,
          name,
          order,
          strategy,
          type: order[count]
        });
      default:
        throw new Error(`strategy '${strategy}' is invalid`);
    }
  }
  return rcConfig({
    config,
    count: count + 1,
    ignore,
    name,
    order,
    strategy,
    type: order[count]
  });
}