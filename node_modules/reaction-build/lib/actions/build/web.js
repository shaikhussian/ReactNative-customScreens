'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var runBuild = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(config, previousFileSizes) {
    var webpackWebConfig, webpackNodeConfig, webSpinner, webStats, webMessages, serverSpinner, nodeStats, nodeMessages;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            webpackWebConfig = (0, _createWebpackConfig2.default)('web', 'build', config);

            _reactionBase.log.debug('webpackWebConfig', webpackWebConfig);
            webpackNodeConfig = (0, _createWebpackConfig2.default)('node', 'build', config);

            _reactionBase.log.debug('webpackNodeConfig', webpackNodeConfig);
            process.noDeprecation = true;
            webSpinner = (0, _ora2.default)('compiling web').start();
            _context2.next = 8;
            return compile(webpackWebConfig);

          case 8:
            webStats = _context2.sent;
            webMessages = handleStats(webStats);

            webSpinner.succeed('compiled web');
            serverSpinner = (0, _ora2.default)('compiling server').start();
            _context2.next = 14;
            return compile(webpackNodeConfig);

          case 14:
            nodeStats = _context2.sent;
            nodeMessages = handleStats(nodeStats);

            serverSpinner.succeed('compiled server');
            return _context2.abrupt('return', {
              stats: webStats,
              previousFileSizes,
              warnings: _lodash2.default.assign({}, webMessages.warnings, nodeMessages.warnings)
            });

          case 18:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function runBuild(_x3, _x4) {
    return _ref3.apply(this, arguments);
  };
}();

var compile = function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(config) {
    return regeneratorRuntime.wrap(function _callee3$(_context3) {
      while (1) {
        switch (_context3.prev = _context3.next) {
          case 0:
            return _context3.abrupt('return', new Promise(function (resolve, reject) {
              try {
                return (0, _webpack2.default)(config).run(function (err, stats) {
                  if (err) return reject(err);
                  return resolve(stats);
                });
              } catch (err) {
                return reject(err);
              }
            }));

          case 1:
          case 'end':
            return _context3.stop();
        }
      }
    }, _callee3, this);
  }));

  return function compile(_x5) {
    return _ref4.apply(this, arguments);
  };
}();

var _FileSizeReporter = require('react-dev-utils/FileSizeReporter');

var _FileSizeReporter2 = _interopRequireDefault(_FileSizeReporter);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');

var _formatWebpackMessages2 = _interopRequireDefault(_formatWebpackMessages);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _reactionBase = require('reaction-base');

var _clean = require('../clean');

var _clean2 = _interopRequireDefault(_clean);

var _createConfig = require('../../createConfig');

var _createConfig2 = _interopRequireDefault(_createConfig);

var _createWebpackConfig = require('../../create-webpack-config');

var _createWebpackConfig2 = _interopRequireDefault(_createWebpackConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var measureFileSizesBeforeBuild = _FileSizeReporter2.default.measureFileSizesBeforeBuild,
    printFileSizesAfterBuild = _FileSizeReporter2.default.printFileSizesAfterBuild;
var _process = process,
    env = _process.env;

exports.default = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options, config) {
    var spinner, _config, paths, _ref2, stats, previousFileSizes, warnings;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            if (config) {
              _context.next = 6;
              break;
            }

            _context.next = 3;
            return (0, _createConfig2.default)({ defaultEnv: 'production', options });

          case 3:
            config = _context.sent;

            _reactionBase.log.debug('options', options);
            _reactionBase.log.debug('config', config);

          case 6:
            _context.next = 8;
            return (0, _clean2.default)(options, config);

          case 8:
            spinner = (0, _ora2.default)('building web').start();
            _config = config, paths = _config.paths;

            if (_fsExtra2.default.existsSync(paths.srcPublic)) {
              _fsExtra2.default.copySync(paths.srcPublic, paths.distPublic, {
                dereference: true
              });
            } else {
              _fsExtra2.default.mkdirsSync(paths.distPublic);
            }
            _context.t0 = runBuild;
            _context.t1 = config;
            _context.next = 15;
            return measureFileSizesBeforeBuild(paths.distPublic);

          case 15:
            _context.t2 = _context.sent;
            _context.next = 18;
            return (0, _context.t0)(_context.t1, _context.t2);

          case 18:
            _ref2 = _context.sent;
            stats = _ref2.stats;
            previousFileSizes = _ref2.previousFileSizes;
            warnings = _ref2.warnings;

            if (warnings.length) {
              spinner.warn('built web');
              _reactionBase.log.info(warnings.join('\n\n'));
            } else {
              spinner.succeed('built web');
            }
            _reactionBase.log.info('file sizes after gzip:\n');
            printFileSizesAfterBuild(stats, previousFileSizes, paths.dist);
            _reactionBase.log.info('');

          case 26:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function buildWeb(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return buildWeb;
}();

function handleStats(stats) {
  var messages = (0, _formatWebpackMessages2.default)(stats.toJson({}, true));
  var errorIgnoreList = [];
  var errors = filterMessages(messages.errors, errorIgnoreList);
  if (errors.length) {
    throw new Error(`\n${errors.join('\n\n')}\n`);
  }
  var warningIgnoreList = ['asset size limit: The following asset(s) exceed the recommended size limit', 'entrypoint size limit: The following entrypoint(s)' + ' combined asset size exceeds the recommended limit', 'webpack performance recommendations', './node_modules/colors/lib/colors.js', './node_modules/parse5/lib/index.js', './node_modules/express/lib/view.js'];
  var warnings = filterMessages(messages.warnings, warningIgnoreList);
  if (warnings.length) {
    if (env.CI && (!_lodash2.default.isString(env.CI) || env.CI.toLowerCase() !== 'false')) {
      _reactionBase.log.info(_chalk2.default.yellow('\ntreating warnings as errors because `CI = true`\n' + 'most CI servers set it automatically'));
      throw new Error(`\n${warnings.join('\n\n')}\n`);
    } else {
      _reactionBase.log.info(`\n${warnings.join('\n\n')}\n`);
    }
  }
  return messages;
}

function filterMessages(messages, ignoreList) {
  return _lodash2.default.filter(messages, function (message) {
    var filter = true;
    ignoreList.forEach(function (ignore) {
      if (_lodash2.default.isRegExp(ignore) && ignore.test(message) || message.indexOf(ignore) > -1) {
        filter = false;
        return false;
      }
      return true;
    });
    return filter;
  });
}