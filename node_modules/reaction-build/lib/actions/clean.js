'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _easycp = require('easycp');

var _easycp2 = _interopRequireDefault(_easycp);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _reactionBase = require('reaction-base');

var _createConfig = require('../createConfig.js');

var _createConfig2 = _interopRequireDefault(_createConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var _process = process,
    env = _process.env;

exports.default = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(options, config) {
    var spinner, _config, paths;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            spinner = (0, _ora2.default)('cleaning').start();

            if (config) {
              _context.next = 7;
              break;
            }

            _context.next = 4;
            return (0, _createConfig2.default)({ options });

          case 4:
            config = _context.sent;

            _reactionBase.log.debug('options', options);
            _reactionBase.log.debug('config', config);

          case 7:
            _config = config, paths = _config.paths;
            _context.next = 10;
            return (0, _easycp2.default)(`rm -rf ${_path2.default.resolve(env.TMPDIR || '/tmp', 'react-*')}`);

          case 10:
            _context.next = 12;
            return (0, _easycp2.default)(`rm -rf ${_path2.default.resolve(env.TMPDIR || '/tmp', 'metro-*')}`);

          case 12:
            _context.next = 14;
            return (0, _easycp2.default)(`rm -rf ${_path2.default.resolve(env.TMPDIR || '/tmp', 'haste-map-*')}`);

          case 14:
            _context.next = 16;
            return (0, _easycp2.default)(`rm -rf ${_path2.default.resolve(paths.android, 'build')}`);

          case 16:
            _context.next = 18;
            return (0, _easycp2.default)(`rm -rf ${_path2.default.resolve(paths.android, 'app/build')}`);

          case 18:
            _context.next = 20;
            return (0, _easycp2.default)(`rm -rf ${_path2.default.resolve(paths.ios, 'build')}`);

          case 20:
            if (!options.debug) {
              _context.next = 25;
              break;
            }

            _context.next = 23;
            return (0, _easycp2.default)('watchman watch-del-all');

          case 23:
            _context.next = 27;
            break;

          case 25:
            _context.next = 27;
            return (0, _easycp.silentcp)('watchman watch-del-all');

          case 27:
            _fsExtra2.default.removeSync(paths.dist);
            _fsExtra2.default.removeSync(_path2.default.resolve('.expo'));
            spinner.succeed('cleaned');

          case 30:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function clean(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return clean;
}();