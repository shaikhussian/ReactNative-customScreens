'use strict';

var _commander = require('commander');

var _commander2 = _interopRequireDefault(_commander);

var _action = require('./action');

var _action2 = _interopRequireDefault(_action);

var _error = require('./error');

var _error2 = _interopRequireDefault(_error);

var _package = require('../package');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var isAction = false;

_commander2.default.version(_package.version);
_commander2.default.command('build');
_commander2.default.command('clean');
_commander2.default.command('start');
_commander2.default.command('setup');
_commander2.default.command('storybook');
_commander2.default.option('-a --analyze', 'analyze bundle');
_commander2.default.option('-c --clean', 'clean');
_commander2.default.option('-d --debug', 'debug logging');
_commander2.default.option('-p --platform [name]', 'platform name');
_commander2.default.option('-v --verbose', 'verbose logging');
_commander2.default.option('--inspect', 'inspect');
_commander2.default.option('--inspect-brk', 'inpsect break');
_commander2.default.option('--offline', 'offline');
_commander2.default.option('--expo-platform [name]', 'expo platform name');
_commander2.default.option('--inotify', 'increase inotify');
_commander2.default.action(function (cmd, options) {
  isAction = true;
  (0, _action2.default)(cmd, options).catch(_error2.default);
});
_commander2.default.parse(process.argv);

if (!isAction) {
  (0, _action2.default)('run', {}).catch(_error2.default);
}