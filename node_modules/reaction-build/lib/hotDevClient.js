'use strict';

var handleSuccess = function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee5() {
    var isHotUpdate;
    return regeneratorRuntime.wrap(function _callee5$(_context5) {
      while (1) {
        switch (_context5.prev = _context5.next) {
          case 0:
            clearErrors();
            isHotUpdate = !isFirstCompilation;
            _context5.prev = 2;

            if (!isHotUpdate) {
              _context5.next = 7;
              break;
            }

            _context5.next = 6;
            return applyUpdates();

          case 6:
            (0, _reactErrorOverlay.dismissBuildError)();

          case 7:
            _context5.next = 14;
            break;

          case 9:
            _context5.prev = 9;
            _context5.t0 = _context5['catch'](2);

            (0, _reactErrorOverlay.reportBuildError)(_context5.t0.stack);
            _log2.default.error(_context5.t0);
            hadError = true;

          case 14:
            isFirstCompilation = false;

          case 15:
          case 'end':
            return _context5.stop();
        }
      }
    }, _callee5, this, [[2, 9]]);
  }));

  return function handleSuccess() {
    return _ref5.apply(this, arguments);
  };
}();

var handleErrors = function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee6(errors) {
    var formatted;
    return regeneratorRuntime.wrap(function _callee6$(_context6) {
      while (1) {
        switch (_context6.prev = _context6.next) {
          case 0:
            clearErrors();
            formatted = (0, _formatWebpackMessages2.default)({ errors, warnings: [] });

            (0, _reactErrorOverlay.reportBuildError)(formatted.errors[0]);
            _lodash2.default.each(formatted.errors, function (error, index) {
              if (index < formatted.errors.length) {
                if (index === 5) {
                  _log2.default.error('There were more errors in other files.\n' + 'You can find a complete log in the terminal.');
                }
                _log2.default.error((0, _stripAnsi2.default)(error));
                return true;
              }
              return false;
            });
            hadServerError = true;
            hadError = true;
            isFirstCompilation = false;

          case 7:
          case 'end':
            return _context6.stop();
        }
      }
    }, _callee6, this);
  }));

  return function handleErrors(_x2) {
    return _ref6.apply(this, arguments);
  };
}();

var handleWarnings = function () {
  var _ref7 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee7(warnings) {
    var isHotUpdate, printWarnings;
    return regeneratorRuntime.wrap(function _callee7$(_context7) {
      while (1) {
        switch (_context7.prev = _context7.next) {
          case 0:
            printWarnings = function printWarnings() {
              var formatted = (0, _formatWebpackMessages2.default)({ warnings, errors: [] });
              _lodash2.default.each(formatted.warnings, function (warning, index) {
                if (index < formatted.warnings.length) {
                  if (index === 5) {
                    _log2.default.warn('There were more warnings in other files.\n' + 'You can find a complete log in the terminal.');
                  }
                  _log2.default.warn((0, _stripAnsi2.default)(warning));
                }
              });
            };

            clearErrors();
            isHotUpdate = !isFirstCompilation;

            printWarnings();
            _context7.prev = 4;

            if (!isHotUpdate) {
              _context7.next = 9;
              break;
            }

            _context7.next = 8;
            return applyUpdates();

          case 8:
            (0, _reactErrorOverlay.dismissBuildError)();

          case 9:
            _context7.next = 16;
            break;

          case 11:
            _context7.prev = 11;
            _context7.t0 = _context7['catch'](4);

            (0, _reactErrorOverlay.reportBuildError)(_context7.t0.stack);
            _log2.default.error(_context7.t0);
            hadError = true;

          case 16:
            isFirstCompilation = false;

          case 17:
          case 'end':
            return _context7.stop();
        }
      }
    }, _callee7, this, [[4, 11]]);
  }));

  return function handleWarnings(_x3) {
    return _ref7.apply(this, arguments);
  };
}();

var applyUpdates = function () {
  var _ref8 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee8() {
    return regeneratorRuntime.wrap(function _callee8$(_context8) {
      while (1) {
        switch (_context8.prev = _context8.next) {
          case 0:
            if (module.hot) {
              _context8.next = 2;
              break;
            }

            return _context8.abrupt('return', windowReload());

          case 2:
            if (!(!isUpdateAvailable() || module.hot.status() !== 'idle')) {
              _context8.next = 4;
              break;
            }

            return _context8.abrupt('return', false);

          case 4:
            return _context8.abrupt('return', new Promise(function (resolve, reject) {
              function handleApplyUpdates(err, _updatedModules) {
                if (err && !hadServerError) return reject(err);
                if (hadServerError) hadServerError = false;
                if (isUpdateAvailable()) applyUpdates().then(function () {
                  return resolve();
                });
                return resolve();
              }
              var result = module.hot.check(true, handleApplyUpdates);
              if (result && result.then) {
                return result.then(function (updatedModules) {
                  return handleApplyUpdates(null, updatedModules);
                }).catch(function (err) {
                  return handleApplyUpdates(err, null);
                });
              }
              return result;
            }));

          case 5:
          case 'end':
            return _context8.stop();
        }
      }
    }, _callee8, this);
  }));

  return function applyUpdates() {
    return _ref8.apply(this, arguments);
  };
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _config = require('reaction-base/lib/config');

var _config2 = _interopRequireDefault(_config);

var _formatWebpackMessages = require('react-dev-utils/formatWebpackMessages');

var _formatWebpackMessages2 = _interopRequireDefault(_formatWebpackMessages);

var _log = require('reaction-base/lib/log');

var _log2 = _interopRequireDefault(_log);

var _stripAnsi = require('strip-ansi');

var _stripAnsi2 = _interopRequireDefault(_stripAnsi);

var _reactErrorOverlay = require('react-error-overlay');

var _hotClient = require('./hotClient');

var _hotClient2 = _interopRequireDefault(_hotClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// eslint-disable-next-line no-undef
var browserWindow = window;

if (_config2.default.options.verbose) (0, _log.setLevel)('verbose');
if (_config2.default.options.debug) {
  browserWindow.module = module;
  (0, _log.setLevel)('debug');
}
if (_config2.default !== 'production') browserWindow.reaction = { config: _config2.default };

var hadServerError = false;
var hadError = false;
var hash = null;
var isFirstCompilation = true;

(0, _reactErrorOverlay.startReportingRuntimeErrors)({
  onError: function onError() {
    hadError = true;
    return true;
  },
  filename: `${_config2.default.paths.distPublic}/scripts/bundle.js`
});
if (module.hot && _lodash2.default.isFunction(module.hot.dispose)) {
  module.hot.dispose(function () {
    return (0, _reactErrorOverlay.stopReportingRuntimeErrors)();
  });
}

var client = new _hotClient2.default({ port: _config2.default.ports.dev });
client.onConnected = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _log2.default.debug('connected');

        case 1:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}));
client.onHash = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(message) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _log2.default.debug('hash', hash);
            hash = message.data;

          case 2:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
client.onStillOk = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3() {
  return regeneratorRuntime.wrap(function _callee3$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          _log2.default.debug('still-ok');

        case 1:
        case 'end':
          return _context3.stop();
      }
    }
  }, _callee3, undefined);
}));
client.onOk = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee4() {
  return regeneratorRuntime.wrap(function _callee4$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _log2.default.debug('ok');
          _context4.next = 3;
          return handleSuccess();

        case 3:
        case 'end':
          return _context4.stop();
      }
    }
  }, _callee4, undefined);
}));
client.onContentChanged = function () {
  _log2.default.debug('content-changed');
  windowReload();
};
client.onWarngins = function (message) {
  _log2.default.debug('warnings');
  handleWarnings(message.data);
};
client.onErrors = function (message) {
  _log2.default.debug('errors');
  handleErrors(message.data);
};
client.onClose = function () {
  _log2.default.debug('close');
  _log2.default.info('The development server has disconnected.\n' + 'Refresh the page if necessary.');
};

browserWindow.hothot = module.hot;

function isUpdateAvailable() {
  // eslint-disable-next-line camelcase,no-undef
  return hash !== __webpack_hash__;
}

function clearErrors() {
  if (module.hot.status() === 'fail') {
    windowReload();
  } else if (hadError) {
    hadError = false;
    consoleClear();
    (0, _reactErrorOverlay.dismissBuildError)();
  }
}

function windowReload() {
  if (_config2.default.options.debug) {
    _log2.default.debug('reloading window . . .');
  } else {
    browserWindow.location.reload();
  }
}

function consoleClear() {
  if (_config2.default.options.debug) {
    _log2.default.debug('cleared console');
  } else {
    // eslint-disable-next-line no-console
    console.clear();
  }
}