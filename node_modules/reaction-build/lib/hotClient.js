'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _class;

var _sockjsClient = require('sockjs-client');

var _sockjsClient2 = _interopRequireDefault(_sockjsClient);

var _autobindDecorator = require('autobind-decorator');

var _autobindDecorator2 = _interopRequireDefault(_autobindDecorator);

var _url = require('url');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

// eslint-disable-next-line no-undef
var browserWindow = window;

var HotClient = (0, _autobindDecorator2.default)(_class = function () {
  function HotClient(_ref) {
    var _ref$port = _ref.port,
        port = _ref$port === undefined ? 3333 : _ref$port,
        _ref$protocol = _ref.protocol,
        protocol = _ref$protocol === undefined ? browserWindow.location.protocol : _ref$protocol,
        _ref$hostname = _ref.hostname,
        hostname = _ref$hostname === undefined ? browserWindow.location.hostname : _ref$hostname;

    _classCallCheck(this, HotClient);

    this.connection = new _sockjsClient2.default((0, _url.format)({
      protocol,
      hostname,
      port,
      pathname: '/sockjs-node'
    }));
    this.connection.onclose = this.handleClose;
    this.connection.onmessage = this.handleMessage;
    this.handleConnected();
  }

  _createClass(HotClient, [{
    key: 'handleConnected',
    value: function handleConnected() {
      this.onConnected();
    }
  }, {
    key: 'handleClose',
    value: function handleClose() {
      this.onClose();
    }
  }, {
    key: 'handleMessage',
    value: function handleMessage(e) {
      var message = JSON.parse(e.data);
      switch (message.type) {
        case 'hash':
          this.onHash(message);
          break;
        case 'still-ok':
          this.onStillOk(message);
          break;
        case 'ok':
          this.onOk(message);
          break;
        case 'content-changed':
          this.onContentChanged(message);
          break;
        case 'warnings':
          this.onWarnings(message);
          break;
        case 'errors':
          this.onErrors(message);
          break;
      }
    }
  }, {
    key: 'onConnected',
    value: function onConnected() {
      return true;
    }
  }, {
    key: 'onClose',
    value: function onClose() {
      return true;
    }
  }, {
    key: 'onHash',
    value: function onHash() {
      return true;
    }
  }, {
    key: 'onStillOk',
    value: function onStillOk() {
      return true;
    }
  }, {
    key: 'onOk',
    value: function onOk() {
      return true;
    }
  }, {
    key: 'onContentChanged',
    value: function onContentChanged() {
      return true;
    }
  }, {
    key: 'onWarnings',
    value: function onWarnings() {
      return true;
    }
  }, {
    key: 'onErrors',
    value: function onErrors() {
      return true;
    }
  }]);

  return HotClient;
}()) || _class;

exports.default = HotClient;