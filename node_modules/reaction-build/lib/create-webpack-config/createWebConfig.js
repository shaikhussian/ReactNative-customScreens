'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createWebConfig;

var _assetsWebpackPlugin = require('assets-webpack-plugin');

var _assetsWebpackPlugin2 = _interopRequireDefault(_assetsWebpackPlugin);

var _uglifyjsWebpackPlugin = require('uglifyjs-webpack-plugin');

var _uglifyjsWebpackPlugin2 = _interopRequireDefault(_uglifyjsWebpackPlugin);

var _errorOverlayMiddleware = require('react-dev-utils/errorOverlayMiddleware');

var _errorOverlayMiddleware2 = _interopRequireDefault(_errorOverlayMiddleware);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpackBundleAnalyzer = require('webpack-bundle-analyzer');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function createWebConfig(webpackConfig, action, config) {
  var ports = config.ports,
      paths = config.paths,
      host = config.host,
      environment = config.environment;

  webpackConfig = _extends({}, webpackConfig, {
    entry: {
      client: [paths.client]
    },
    externals: _extends({}, webpackConfig.externals, {
      winston: '{Logger:()=>{},transports:{Console:()=>{}}}',
      'reaction/assets': '{}'
    }),
    plugins: [].concat(_toConsumableArray(webpackConfig.plugins), [new _assetsWebpackPlugin2.default({
      path: paths.dist,
      filename: 'assets.json'
    })])
  });
  if (environment === 'development') {
    webpackConfig = _extends({}, webpackConfig, {
      output: {
        path: paths.distPublic,
        publicPath: action === 'start' ? `http://${host}:${ports.dev}/` : '/',
        pathinfo: true,
        filename: 'scripts/bundle.js',
        chunkFilename: 'scripts/[name].chunk.js',
        devtoolModuleFilenameTemplate: function devtoolModuleFilenameTemplate(info) {
          return _path2.default.resolve(info.resourcePath).replace(/\\/g, '/');
        }
      }
    });
  } else {
    webpackConfig = _extends({}, webpackConfig, {
      output: {
        path: paths.distPublic,
        publicPath: '/',
        filename: 'scripts/bundle.[chunkhash:8].js',
        chunkFilename: 'scripts/[name].[chunkhash:8].chunk.js'
      },
      plugins: [].concat(_toConsumableArray(webpackConfig.plugins), [new _uglifyjsWebpackPlugin2.default({
        uglifyOptions: {
          compress: {
            warnings: false,
            comparisons: false
          },
          output: {
            comments: false
          }
        },
        sourceMap: true
      })])
    });
  }
  if (action === 'start') {
    webpackConfig = _extends({}, webpackConfig, {
      entry: {
        client: [].concat(_toConsumableArray(webpackConfig.entry.client), [require.resolve('../hotDevClient')])
      },
      devServer: {
        before(app) {
          app.use((0, _errorOverlayMiddleware2.default)());
        },
        compress: true,
        disableHostCheck: true,
        headers: { 'Access-Control-Allow-Origin': '*' },
        historyApiFallback: { disableDotRule: true },
        host,
        hot: true,
        noInfo: true,
        overlay: false,
        port: ports.dev,
        quiet: true,
        watchOptions: { ignored: /node_modules/ }
      }
    });
  }
  if (config.options.analyze) {
    webpackConfig = _extends({}, webpackConfig, {
      plugins: [].concat(_toConsumableArray(webpackConfig.plugins), [new _webpackBundleAnalyzer.BundleAnalyzerPlugin({
        analyzerPort: ports.analyzer
      })])
    });
  }
  return webpackConfig;
}