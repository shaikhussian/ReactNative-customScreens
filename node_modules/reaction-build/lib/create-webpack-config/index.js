'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.default = createWebpackConfig;

var _circularJson = require('circular-json');

var _circularJson2 = _interopRequireDefault(_circularJson);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _webpack = require('webpack');

var _createNodeConfig = require('./createNodeConfig');

var _createNodeConfig2 = _interopRequireDefault(_createNodeConfig);

var _createWebConfig = require('./createWebConfig');

var _createWebConfig2 = _interopRequireDefault(_createWebConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function createWebpackConfig() {
  var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'web';
  var action = arguments[1];
  var config = arguments[2];
  var envs = config.envs,
      paths = config.paths,
      eslint = config.eslint,
      babel = config.babel,
      environment = config.environment,
      webpack = config.webpack;

  var webpackConfig = {
    context: process.cwd(),
    target,
    devtool: 'cheap-module-eval-source-map',
    mode: environment,
    resolve: {
      modules: [_path2.default.resolve('node_modules')],
      extensions: ['.web.js', '.js', '.json', '.jsx', '.mjs'],
      alias: {
        '~': paths.src,
        'native-base': require.resolve('native-base-web'),
        'react-native': require.resolve('react-native-web'),
        'react/lib/ReactNativePropRegistry': require.resolve('react-native-web/dist/modules/ReactNativePropRegistry'),
        'webpack/hot/poll': require.resolve('webpack/hot/poll')
      }
    },
    externals: {
      'reaction-base/lib/config': _circularJson2.default.stringify(config)
    },
    module: {
      strictExportPresence: true,
      rules: [{
        test: /\.(js|jsx|mjs)$/,
        include: [paths.src, paths.web],
        loader: require.resolve('eslint-loader'),
        options: eslint,
        enforce: 'pre'
      }, {
        test: /\.(js|jsx|mjs)$/,
        include: [paths.src, paths.web],
        loader: require.resolve('babel-loader'),
        options: babel
      }, {
        test: [/\.bmp$/, /\.gif$/, /\.jpe?g$/, /\.png$/],
        include: [paths.src, paths.web],
        loader: require.resolve('url-loader'),
        options: {
          limit: 10000,
          name: 'public/media/[name].[hash:8].[ext]'
        }
      }, {
        test: /\.html?$/,
        include: [paths.src, paths.web],
        loader: require.resolve('html-loader')
      }, {
        test: /\.md$/,
        include: [paths.src, paths.web],
        use: [{
          loader: require.resolve('html-loader')
        }, {
          loader: require.resolve('markdown-loader'),
          options: {
            pedantic: true,
            gfm: true,
            breaks: true
          }
        }]
      }, {
        exclude: [/\.(js|jsx|mjs)$/, /\.(less)$/, /\.(re)$/, /\.(s?css|sass)$/, /\.(ts|tsx)$/, /\.(vue)$/, /\.bmp$/, /\.gif$/, /\.html?$/, /\.jpe?g$/, /\.json$/, /\.md$/, /\.png$/],
        loader: require.resolve('file-loader'),
        options: {
          name: 'public/media/[name].[hash:8].[ext]'
        }
      }]
    },
    plugins: [new _webpack.DefinePlugin(_extends({}, envs))].concat(_toConsumableArray(environment !== 'production' ? [new _webpack.NamedModulesPlugin()] : []), _toConsumableArray(action === 'start' ? [new _webpack.HotModuleReplacementPlugin(), new _webpack.NoEmitOnErrorsPlugin()] : []))
  };
  if (target === 'web') {
    return webpack(config, (0, _createWebConfig2.default)(webpackConfig, action, config));
  }
  return webpack(config, (0, _createNodeConfig2.default)(webpackConfig, action, config));
}