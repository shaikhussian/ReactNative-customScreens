'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

require('babel-polyfill');

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _log = require('reaction-base/lib/log');

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _ejs = require('ejs');

var _reactionBase = require('reaction-base');

var _http = require('http');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// eslint-disable-next-line import/no-unresolved

// eslint-disable-next-line import/no-unresolved
if (_reactionBase.config.options.verbose) (0, _log.setLevel)('verbose');
if (_reactionBase.config.options.debug) (0, _log.setLevel)('debug');

var errorApp = null;
var serverError = false;
var serverSpinner = (0, _ora2.default)('starting server').start();

if (module.hot) {
  errorApp = (0, _express2.default)();
  errorApp.disable('x-powered-by');
  errorApp.set('views', _path2.default.resolve(__dirname, 'views'));
  errorApp.set('view engine', 'ejs');
  errorApp.engine('.ejs', _ejs.__express);
  errorApp.use(_express2.default.static(_path2.default.resolve(__dirname, 'views')));
  errorApp.use(function (req, res) {
    return res.render('error', { config: _reactionBase.config, errStack: req.err.stack });
  });
}

var app = createApp();
var server = (0, _http.createServer)(app);
startServer(server);

function createApp() {
  // eslint-disable-next-line global-require
  var app = require('~/../web/server').default;
  app.disable('x-powered-by');
  app.use(function (err, req, res, _next) {
    if (err) {
      _reactionBase.log.error(err);
      if (module.hot) {
        serverError = true;
        req.err = err;
        return errorApp.handle(req, res);
      }
      return res.status(500).send('Server error');
    }
    return res.status(404).send('Page not found');
  });
  return app;
}

function startServer(server) {
  server.listen(_reactionBase.config.port, function (err) {
    if (err) throw err;
    serverSpinner.succeed(`server listening on port ${_reactionBase.config.port}`);
    if (module.hot) {
      module.hot.accept('~/../web/server.js', function () {
        _reactionBase.log.info('[HMR] updating HMR');
        if (serverError) {
          serverError = false;
          serverSpinner = (0, _ora2.default)('restarting server');
          server.close(function () {
            var app = createApp();
            var newServer = (0, _http.createServer)(app);
            startServer(newServer);
          });
        }
      });
      _reactionBase.log.info('[HMR] server HMR enabled');
    }
  });
}

exports.default = createApp();