'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

require('babel-polyfill');

var _circularJson = require('circular-json');

var _circularJson2 = _interopRequireDefault(_circularJson);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _log = require('reaction-base/lib/log');

var _log2 = _interopRequireDefault(_log);

var _deasync = require('deasync');

var _createConfig = require('../createConfig');

var _createConfig2 = _interopRequireDefault(_createConfig);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

if (_lodash2.default.includes(process.argv, '--verbose')) {
  (0, _log.setLevel)('verbose');
}
if (_lodash2.default.includes(process.argv, '--debug')) {
  (0, _log.setLevel)('debug');
}

module.exports = function (webpackConfig) {
  var config = null;
  (0, _createConfig2.default)({}).then(function (loadedConfig) {
    config = loadedConfig;
  });
  while (!config) {
    (0, _deasync.sleep)(100);
  }webpackConfig.resolve.extensions.unshift('.web.js');
  webpackConfig.resolve.alias = {
    '~': config.paths.src,
    'native-base': require.resolve('native-base-web'),
    'react/lib/ReactNativePropRegistry': require.resolve('react-native-web/dist/modules/ReactNativePropRegistry'),
    'react-native': require.resolve('react-native-web')
  };
  webpackConfig.externals = _extends({}, webpackConfig.externals, {
    'reaction-base/lib/config': _circularJson2.default.stringify(config)
  });
  var jsxRule = _lodash2.default.find(webpackConfig.module.rules, function (rule) {
    return rule.loader.indexOf('babel-loader') > -1;
  });
  _lodash2.default.assign(jsxRule, {
    query: _extends({}, jsxRule.query, config.babel, {
      plugins: [].concat(_toConsumableArray(jsxRule.query.plugins), _toConsumableArray(config.babel.plugins || [])),
      presets: [].concat(_toConsumableArray(jsxRule.query.presets), _toConsumableArray(config.babel.presets || []))
    })
  });
  _log2.default.debug('webpackConfig', webpackConfig);
  return webpackConfig;
};