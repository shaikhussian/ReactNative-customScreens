'use strict';

require('babel-polyfill');

var _ignoreWarnings = require('ignore-warnings');

var _ignoreWarnings2 = _interopRequireDefault(_ignoreWarnings);

var _log = require('reaction-base/lib/log');

var _log2 = _interopRequireDefault(_log);

var _hotClient = require('../hotClient');

var _hotClient2 = _interopRequireDefault(_hotClient);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

// eslint-disable-next-line no-undef
var browserWindow = window;

browserWindow.document.title = browserWindow.reaction.config.title;

(0, _ignoreWarnings2.default)('react-error-overlay is not meant for use in production');

var hash = null;
var config = browserWindow.reaction.config;


if (config.options.verbose) (0, _log.setLevel)('verbose');
if (config.options.debug) (0, _log.setLevel)('debug');

var _require = require('react-error-overlay'),
    reportBuildError = _require.reportBuildError,
    startReportingRuntimeErrors = _require.startReportingRuntimeErrors;

_log2.default.error(browserWindow.reaction.errStack);

startReportingRuntimeErrors({});
reportBuildError(browserWindow.reaction.errStack);

_log2.default.debug('connecting . . .');
var client = new _hotClient2.default({ port: config.ports.dev });
client.onConnected = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
  return regeneratorRuntime.wrap(function _callee$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          _log2.default.debug('connected');

        case 1:
        case 'end':
          return _context.stop();
      }
    }
  }, _callee, undefined);
}));
client.onHash = function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(message) {
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _log2.default.debug('hash', hash);
            if (hash) windowReload();
            hash = message.data;

          case 3:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, undefined);
  }));

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();
client.onContentChanged = function () {
  _log2.default.debug('content-changed');
  windowReload();
};
client.onClose = function () {
  _log2.default.debug('close');
  _log2.default.info('The development server has disconnected.\n' + 'Refresh the page if necessary.');
};

function windowReload() {
  if (config.options.debug) {
    _log2.default.debug('reloading window . . .');
  } else {
    setTimeout(function () {
      browserWindow.location.reload();
    }, 1000);
  }
}