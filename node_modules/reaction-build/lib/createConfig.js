'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var getPort = function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {
    var port = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 3333;
    var newPort;
    return regeneratorRuntime.wrap(function _callee2$(_context2) {
      while (1) {
        switch (_context2.prev = _context2.next) {
          case 0:
            _context2.next = 2;
            return (0, _detectPort2.default)(port);

          case 2:
            newPort = _context2.sent;

            if (!_lodash2.default.includes(occupiedPorts, newPort)) {
              _context2.next = 5;
              break;
            }

            return _context2.abrupt('return', getPort(++newPort));

          case 5:
            occupiedPorts.push(newPort);
            return _context2.abrupt('return', newPort);

          case 7:
          case 'end':
            return _context2.stop();
        }
      }
    }, _callee2, this);
  }));

  return function getPort() {
    return _ref3.apply(this, arguments);
  };
}();

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _detectPort = require('detect-port');

var _detectPort2 = _interopRequireDefault(_detectPort);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _rcConfig = require('rc-config');

var _rcConfig2 = _interopRequireDefault(_rcConfig);

var _crossEnvironment = require('cross-environment');

var _config = require('./config');

var _config2 = _interopRequireDefault(_config);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

var pkg = require(_path2.default.resolve('package.json'));
var occupiedPorts = [];

exports.default = function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(_ref2) {
    var _ref2$defaultEnv = _ref2.defaultEnv,
        defaultEnv = _ref2$defaultEnv === undefined ? 'development' : _ref2$defaultEnv,
        _ref2$options = _ref2.options,
        options = _ref2$options === undefined ? {} : _ref2$options;
    var environment, userConfig, eslint, config, port;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            (0, _crossEnvironment.setEnvironment)({
              defaults: {
                env: defaultEnv
              }
            });
            environment = (0, _crossEnvironment.getEnv)();
            userConfig = (0, _rcConfig2.default)({ name: 'reaction' });
            eslint = (0, _rcConfig2.default)({ name: 'eslint' });
            config = _lodash2.default.merge(_config2.default, userConfig);
            _context.next = 7;
            return getPort(config.port);

          case 7:
            port = _context.sent;
            _context.t0 = _extends;
            _context.t1 = {};
            _context.t2 = config;
            _context.t3 = {
              android: _lodash2.default.isArray(config.publish.android) ? config.publish.android : [config.publish.android],
              web: _lodash2.default.isArray(config.publish.web) ? config.publish.web : config.publish.web,
              ios: _lodash2.default.isArray(config.publish.ios) ? config.publish.ios : [config.publish.ios]
            };
            _context.t4 = port;
            _context.next = 15;
            return getPort(port + 2);

          case 15:
            _context.t5 = _context.sent;
            _context.next = 18;
            return getPort(port + 3);

          case 18:
            _context.t6 = _context.sent;
            _context.next = 21;
            return getPort(8081);

          case 21:
            _context.t7 = _context.sent;
            _context.next = 24;
            return getPort(port + 1);

          case 24:
            _context.t8 = _context.sent;
            _context.next = 27;
            return getPort(7007);

          case 27:
            _context.t9 = _context.sent;
            _context.t10 = {
              analyzer: _context.t5,
              dev: _context.t6,
              native: _context.t7,
              storybook: _context.t8,
              storybookNative: _context.t9
            };
            _context.t11 = _extends({}, config.envs, {
              NODE_ENV: environment,
              __DEV__: environment !== 'production',
              HOST: config.host,
              PORT: config.port
            });
            _context.t12 = environment;
            _context.t13 = _lodash2.default.merge(pkg.babel, config.babel);
            _context.t14 = _lodash2.default.merge(eslint, pkg.eslint, config.eslint);
            _context.t15 = options;
            _context.t16 = _lodash2.default.zipObject(_lodash2.default.keys(config.paths), _lodash2.default.map(config.paths, function (configPath) {
              return _path2.default.resolve(configPath);
            }));
            _context.t17 = {
              publish: _context.t3,
              port: _context.t4,
              ports: _context.t10,
              envs: _context.t11,
              environment: _context.t12,
              babel: _context.t13,
              eslint: _context.t14,
              options: _context.t15,
              paths: _context.t16
            };
            return _context.abrupt('return', (0, _context.t0)(_context.t1, _context.t2, _context.t17));

          case 37:
          case 'end':
            return _context.stop();
        }
      }
    }, _callee, this);
  }));

  function createConfig(_x) {
    return _ref.apply(this, arguments);
  }

  return createConfig;
}();