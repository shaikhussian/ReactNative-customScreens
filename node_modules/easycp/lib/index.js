'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

exports.readcp = readcp;
exports.silentcp = silentcp;

var _child_process = require('child_process');

var _child_process2 = _interopRequireDefault(_child_process);

var _constants = require('./constants');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var defaults = {
  stdout: true,
  stderr: true,
  stdio: 'inherit',
  read: false
};

function easycp() {
  var cmd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'echo';
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  if (typeof args === 'string') args = [args];
  if (!Array.isArray(args)) {
    options = args;
    args = [];
  }
  if (options.read && !options.stdio) {
    options.stdio = 'pipe';
    if (options.stdout !== true) options.stdout = false;
    if (options.stderr !== true) options.stderr = false;
  }
  if (options.stdio === false) {
    options.stdio = 'ignore';
    if (options.stdout !== true) options.stdout = false;
    if (options.stderr !== true) options.stderr = false;
  } else if (options.stdio === true) {
    options.stdio = 'inherit';
    if (options.stdout !== false) options.stdout = true;
    if (options.stderr !== false) options.stderr = true;
  }
  options = _extends({}, defaults, options);
  if ((!options.stdout || !options.stderr) && options.stdio === 'inherit') {
    options.stdio = 'pipe';
  }
  if (cmd.indexOf(' ') > -1) {
    var cmdArray = cmd.match(_constants.REGEX_SPLIT_CMD).map(function (cmdItem) {
      if (cmdItem.length && (cmdItem[0] === '"' || cmdItem[0] === "'")) {
        return cmdItem.substr(1, cmdItem.length - 2);
      }
      return cmdItem;
    });
    args = [].concat(_toConsumableArray(cmdArray.slice(1)), _toConsumableArray(args));

    var _cmdArray = _slicedToArray(cmdArray, 1);

    cmd = _cmdArray[0];
  }
  var proc = _child_process2.default.spawn(cmd, args, options);
  var promise = new Promise(function (resolve, reject) {
    try {
      var combinedOutput = '';
      if (proc.stdout) {
        proc.stdout.on('data', function (data) {
          var output = data.toString();
          combinedOutput += output;
          if (options.stdout) {
            process.stdout.write(output);
          }
        });
      }
      if (proc.stderr) {
        proc.stderr.on('data', function (data) {
          var output = data.toString();
          combinedOutput += output;
          if (options.stderr) {
            process.stderr.write(output);
          }
        });
      }
      return proc.on('close', function () {
        if (options.read) {
          return resolve(combinedOutput);
        }
        return resolve(proc);
      });
    } catch (err) {
      return reject(err);
    }
  });
  promise.process = proc;
  promise.cmd = cmd;
  promise.args = args;
  return promise;
}

function readcp() {
  var cmd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'echo';
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return easycp(cmd, args, _extends({}, options, { read: true }));
}

function silentcp() {
  var cmd = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'echo';
  var args = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  return easycp(cmd, args, _extends({}, options, { stdio: false }));
}

exports.default = easycp;