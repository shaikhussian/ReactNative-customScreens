'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _assign = require('babel-runtime/core-js/object/assign');

var _assign2 = _interopRequireDefault(_assign);

exports.default = start;

var _redux = require('redux');

var _addons = require('@storybook/addons');

var _addons2 = _interopRequireDefault(_addons);

var _global = require('global');

var _channelPostmessage = require('@storybook/channel-postmessage');

var _channelPostmessage2 = _interopRequireDefault(_channelPostmessage);

var _key_events = require('@storybook/ui/dist/libs/key_events');

var _story_store = require('./story_store');

var _story_store2 = _interopRequireDefault(_story_store);

var _client_api = require('./client_api');

var _client_api2 = _interopRequireDefault(_client_api);

var _config_api = require('./config_api');

var _config_api2 = _interopRequireDefault(_config_api);

var _reducer = require('./reducer');

var _reducer2 = _interopRequireDefault(_reducer);

var _actions = require('./actions');

var Actions = _interopRequireWildcard(_actions);

var _syncUrlWithStore = require('./syncUrlWithStore');

var _syncUrlWithStore2 = _interopRequireDefault(_syncUrlWithStore);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function start(render) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      decorateStory = _ref.decorateStory;

  // check whether we're running on node/browser
  var isBrowser = _global.navigator && _global.navigator.userAgent && _global.navigator.userAgent !== 'storyshots' && !(_global.navigator.userAgent.indexOf('Node.js') > -1) && !(_global.navigator.userAgent.indexOf('jsdom') > -1);

  var storyStore = new _story_store2.default();
  var reduxStore = (0, _redux.createStore)(_reducer2.default);
  var context = { storyStore: storyStore, reduxStore: reduxStore, decorateStory: decorateStory };

  var clientApi = new _client_api2.default(context);

  var channel = void 0;
  if (isBrowser) {
    // setup preview channel
    channel = (0, _channelPostmessage2.default)({ page: 'preview' });
    channel.on('setCurrentStory', function (data) {
      reduxStore.dispatch(Actions.selectStory(data.kind, data.story));
    });
    _addons2.default.setChannel(channel);
    (0, _assign2.default)(context, { channel: channel });

    (0, _syncUrlWithStore2.default)(reduxStore);

    // Handle keyboard shortcuts
    _global.window.onkeydown = (0, _key_events.handleKeyboardShortcuts)(channel);
  }

  // Provide access to external scripts if `window` is defined.
  // NOTE this is different to isBrowser, primarily for the JSDOM use case
  if (typeof _global.window !== 'undefined') {
    _global.window.__STORYBOOK_CLIENT_API__ = clientApi;
    _global.window.__STORYBOOK_ADDONS_CHANNEL__ = channel; // may not be defined
  }

  var clearDecorators = clientApi.clearDecorators;

  var configApi = new _config_api2.default((0, _extends3.default)({ clearDecorators: clearDecorators }, context));

  var prevKind = void 0;
  var prevStory = void 0;

  // initialize the UI
  var renderUI = function renderUI() {
    if (isBrowser) {
      render(context);

      var _reduxStore$getState = reduxStore.getState(),
          selectedKind = _reduxStore$getState.selectedKind,
          selectedStory = _reduxStore$getState.selectedStory;

      if (selectedKind !== prevKind || selectedStory !== prevStory) {
        // Scroll to top of the page when changing story
        _global.document.documentElement.scrollTop = 0;
        prevKind = selectedKind;
        prevStory = selectedStory;
      }
    }
  };

  reduxStore.subscribe(renderUI);

  return { context: context, clientApi: clientApi, configApi: configApi, forceReRender: function forceReRender() {
      return render(context, true);
    } };
}